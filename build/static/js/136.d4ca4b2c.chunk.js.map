{"version":3,"sources":["views/apps/chat/ChatLog.js","../node_modules/reactstrap/es/Input.js","redux/actions/chat/index.js"],"names":["i","ChatLog","state","astro","chatsContacts","msg","type","activeUser","activeChat","handleSendMessage","id","isPinned","text","length","props","sendMessage","setState","handleTime","time_to","time_from","date_time_to","Date","parse","date_time_from","getFullYear","getMonth","getDate","scrollToBottom","chatContainer","ReactDOM","findDOMNode","chatArea","scrollTop","scrollHeight","submitHandler","e","astroid","userId","preventDefault","astroId","JSON","localStorage","getItem","obj","userid","axiosConfig","post","then","response","console","log","data","status","get","roomId","response1","roomChatData","catch","error","handleChange","target","value","this","activeUser_id","_id","chat","chats","renderChats","undefined","map","Fragment","key","time","className","toLocaleString","month","renderSentTime","isSent","src","userimg","alt","height","width","userImg","photoURL","renderAvatar","textContent","size","onClick","mql","matches","mainSidebar","handleReceiverSidebar","displayName","togglePinned","stroke","options","wheelPropagation","ref","el","onSubmit","placeholder","onChange","color","React","Component","connect","chatApp","_excluded","propTypes","children","PropTypes","node","string","oneOfType","number","bsSize","valid","bool","invalid","tag","tagPropType","innerRef","object","func","plaintext","addon","cssModule","Input","_React$Component","_this","call","getRef","bind","_assertThisInitialized","focus","_inheritsLoose","_proto","prototype","render","_this$props","attributes","_objectWithoutPropertiesLoose","checkInput","indexOf","isNotaNumber","RegExp","Tag","formControlClass","test","warnOnce","classes","mapToCssModules","classNames","createElement","_extends","defaultProps","getChats","dispatch","axios","contacts","err","getContactChats","contactId","newMsg","isSeen","toString","message","changeStatus","searchContacts","query","markSeenAllMessages"],"mappings":"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","file":"static/js/136.d4ca4b2c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Input, Button } from \"reactstrap\"\r\nimport { MessageSquare, Menu, Star, Send } from \"react-feather\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\nimport { connect } from \"react-redux\"\r\nimport { togglePinned, sendMessage } from \"../../../redux/actions/chat/index\"\r\nimport userImg from \"../../../assets/img/portrait/small/avatar-s-11.jpg\"\r\nimport axiosConfig from \"../../../axiosConfig\"\r\n\r\nclass ChatLog extends React.Component {\r\n  // static getDerivedStateFromProps(props, state) {\r\n  //   if (\r\n  //     props.activeUser !== state.activeChat ||\r\n  //     props.activeChat !== state.activeChat\r\n  //   ) {\r\n  //     return {\r\n  //       activeUser: props.activeUser,\r\n  //       activeChat: props.activeChat\r\n  //     }\r\n  //   }\r\n  //   // Return null if the state hasn't changed\r\n  //   return null\r\n  // }\r\n  state = {\r\n    astro: [],\r\n    chatsContacts: [],\r\n    msg: \"\",\r\n    type: \"\",\r\n    activeUser: null,\r\n    activeChat: null\r\n  }\r\n\r\n  handleSendMessage = (id, isPinned, text) => {\r\n    if (text.length > 0) {\r\n      this.props.sendMessage(id, isPinned, text)\r\n      this.setState({\r\n        msg: \"\"\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    //\r\n    // let { id } = this.props.match.params;\r\n\r\n    // let astroid = JSON.parse(l;ocalStorage.getItem(\"astroId\"));\r\n    let astroId = localStorage.getItem(\"astroId\");\r\n    // console.log(astroId);\r\n    axiosConfig\r\n      .get(`/user/allchatwithAstro/${astroId}`)\r\n      // .get(`/user/astrogetRoomid/${id}`)\r\n      .then((response) => {\r\n        console.log(\"chatsContacts\", response.data.data);\r\n        this.setState({\r\n          chatsContacts: response.data.data,\r\n          // msg: response.data.data.msg,\r\n          // type: response.data.data.type,\r\n\r\n        });\r\n\r\n        // if (response.data.status === true) {\r\n        //   this.getChatContents()\r\n        // }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n\r\n\r\n  }\r\n  // componentDidMount() {\r\n  //   this.scrollToBottom()\r\n  // }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom()\r\n  }\r\n\r\n  handleTime = (time_to, time_from) => {\r\n    const date_time_to = new Date(Date.parse(time_to))\r\n    const date_time_from = new Date(Date.parse(time_from))\r\n    return (\r\n      date_time_to.getFullYear() === date_time_from.getFullYear() &&\r\n      date_time_to.getMonth() === date_time_from.getMonth() &&\r\n      date_time_to.getDate() === date_time_from.getDate()\r\n    )\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    const chatContainer = ReactDOM.findDOMNode(this.chatArea)\r\n    chatContainer.scrollTop = chatContainer.scrollHeight\r\n  }\r\n  submitHandler = async (e, astroid, userId) => {\r\n    e.preventDefault();\r\n    // let { id } = this.props.match.params;\r\n    let astroId = JSON.parse(localStorage.getItem(\"astroId\"));\r\n    let obj = {\r\n      userid: this.state.userId,\r\n      msg: this.state.msg,\r\n    };\r\n\r\n    await axiosConfig\r\n      .post(`/user/add_chatroom/${astroId}`, obj)\r\n      .then((response) => {\r\n        console.log(\"hdfkjh\", response.data.status)\r\n        if (response.data.status === true) {\r\n          this.setState({ msg: \"\" });\r\n          axiosConfig.get(`/user/allchatwithAstro/${this.state.roomId}`)\r\n            .then((response1) => {\r\n              console.log(response1?.data?.data);\r\n              if (response1.data.status === true) {\r\n                this.setState({ roomChatData: response1?.data.data });\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n        }\r\n      })\r\n\r\n      .catch((error) => {\r\n        // swal(\"Error!\", \"You clicked the button!\", \"error\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      msg: e.target.value,\r\n    });\r\n  };\r\n  render() {\r\n    console.log(this.state.activeUser)\r\n\r\n    const { chatsContacts, activeUser } = this.state\r\n    let activeUser_id = activeUser && activeUser._id ? activeUser._id : null,\r\n      activeChat =\r\n        activeUser && activeUser._id\r\n          ? this.props.chat.chats[activeUser_id]\r\n          : null\r\n\r\n    let renderChats =\r\n      activeChat && activeChat !== undefined && activeChat.msg\r\n        ? activeChat.msg.map((chat, i) => {\r\n          let renderSentTime = () => {\r\n            if (\r\n              i > 0 &&\r\n              !this.handleTime(chat.time, activeChat.msg[i - 1].time)\r\n            ) {\r\n              return (\r\n                <div className=\"divider\">\r\n                  <div className=\"divider-text\">\r\n                    {new Date().getDate() +\r\n                      \" \" +\r\n                      new Date().toLocaleString(\"default\", {\r\n                        month: \"short\"\r\n                      })}\r\n                  </div>\r\n                </div>\r\n              )\r\n            }\r\n          }\r\n          let renderAvatar = () => {\r\n            if (i > 0) {\r\n              if (\r\n                chat.isSent === true &&\r\n                activeChat.msg[i - 1].isSent !== true\r\n              ) {\r\n                return (\r\n                  <div className=\"chat-avatar\">\r\n                    <div className=\"avatar m-0\">\r\n                      <img\r\n                        src={chat.astroid?.userimg[0]}\r\n                        alt=\"chat avatar\"\r\n                        height=\"40\"\r\n                        width=\"40\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )\r\n              } else if (chat.isSent !== true) {\r\n                return (\r\n                  <div className=\"chat-avatar\">\r\n                    <div className=\"avatar m-0\">\r\n                      <img\r\n                        src={chat.userid?.userimg[0]}\r\n                        alt=\"chat avatar\"\r\n                        height=\"40\"\r\n                        width=\"40\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )\r\n              } else {\r\n                return \"\"\r\n              }\r\n            } else {\r\n              return (\r\n                <div className=\"chat-avatar\">\r\n                  <div className=\"avatar m-0\">\r\n                    <img\r\n                      src={chat.isSent ? userImg : activeUser.photoURL}\r\n                      alt=\"chat avatar\"\r\n                      height=\"40\"\r\n                      width=\"40\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )\r\n            }\r\n          }\r\n          return (\r\n            <React.Fragment key={i}>\r\n              {renderSentTime()}\r\n              <div\r\n                className={`chat ${chat.isSent !== true ? \"chat-left\" : \"chat-right\"\r\n                  }`}>\r\n                {renderAvatar()}\r\n                <div className=\"chat-body\">\r\n                  <div className=\"chat-content\">{chat.textContent}</div>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n          )\r\n        })\r\n        : null\r\n\r\n    return (\r\n      <div className=\"content-right\">\r\n        <div className=\"chat-app-window\">\r\n          <div\r\n            className={`start-chat-area ${activeUser !== null ? \"d-none\" : \"d-flex\"\r\n              }`}>\r\n            <span className=\"mb-1 start-chat-icon\">\r\n              <MessageSquare size={50} />\r\n            </span>\r\n            <h4\r\n              className=\"py-50 px-1 sidebar-toggle start-chat-text\"\r\n              onClick={() => {\r\n                if (this.props.mql.matches === false) {\r\n                  this.props.mainSidebar(true)\r\n                } else {\r\n                  return null\r\n                }\r\n              }}>\r\n              Start Conversation\r\n            </h4>\r\n          </div>\r\n          <div\r\n            className={`active-chat ${activeUser === null ? \"d-none\" : \"d-block\"\r\n              }`}>\r\n            <div className=\"chat_navbar\">\r\n              <header className=\"chat_header d-flex justify-content-between align-items-center p-1\">\r\n                <div className=\"d-flex align-items-center\">\r\n                  <div\r\n                    className=\"sidebar-toggle d-block d-lg-none mr-1\"\r\n                    onClick={() => this.props.mainSidebar(true)}>\r\n                    <Menu size={24} />\r\n                  </div>\r\n                  <div\r\n                    className=\"avatar user-profile-toggle m-0 m-0 mr-1\"\r\n                    onClick={() => this.props.handleReceiverSidebar(\"open\")}>\r\n                    <img\r\n                      src={activeUser !== null ? activeUser.photoURL : \"\"}\r\n                      alt={activeUser !== null ? activeUser.displayName : \"\"}\r\n                      height=\"40\"\r\n                      width=\"40\"\r\n                    />\r\n                    <span\r\n                      className={`\r\n                    ${activeUser !== null &&\r\n                          activeUser.status === \"do not disturb\"\r\n                          ? \"avatar-status-busy\"\r\n                          : activeUser !== null && activeUser.status === \"away\"\r\n                            ? \"avatar-status-away\"\r\n                            : activeUser !== null && activeUser.status === \"offline\"\r\n                              ? \"avatar-status-offline\"\r\n                              : \"avatar-status-online\"\r\n                        }\r\n                    `}\r\n                    />\r\n                  </div>\r\n                  <h6 className=\"mb-0\">\r\n                    {activeUser !== null ? activeUser.displayName : \"\"}\r\n                  </h6>\r\n                </div>\r\n                <span\r\n                  className=\"favorite\"\r\n                  onClick={() => {\r\n                    if (activeChat) {\r\n                      this.props.togglePinned(\r\n                        activeUser._id,\r\n                        !activeChat.isPinned\r\n                      )\r\n                    }\r\n                  }}>\r\n                  <Star\r\n                    size={22}\r\n                    stroke={\r\n                      activeChat && activeChat.isPinned === true\r\n                        ? \"#FF9F43\"\r\n                        : \"#626262\"\r\n                    }\r\n                  />\r\n                </span>\r\n              </header>\r\n            </div>\r\n            <PerfectScrollbar\r\n              className=\"user-chats\"\r\n              options={{\r\n                wheelPropagation: false\r\n              }}\r\n              ref={el => {\r\n                this.chatArea = el\r\n              }}>\r\n              <div className=\"chats\">{renderChats}</div>\r\n            </PerfectScrollbar>\r\n            <div className=\"chat-app-form\">\r\n\r\n              <form\r\n                className=\"chat-app-input d-flex align-items-center\"\r\n                onSubmit={e => {\r\n                  e.preventDefault()\r\n                  this.handleSendMessage(\r\n                    activeUser._id,\r\n                    false,\r\n                    this.state.data?.msg,\r\n                    activeUser\r\n                  )\r\n                }}>\r\n                <Input\r\n                  // roomChatData={this.state.roomChatData.length > 0 ? this.state.roomChatData : []}\r\n                  type=\"text\"\r\n                  className=\"message mr-1 ml-50\"\r\n                  placeholder=\"Type your message\"\r\n                  value={this.state.msg}\r\n                  onChange={e => {\r\n                    e.preventDefault()\r\n                    this.setState({\r\n                      msg: e.target.value\r\n                    })\r\n                  }}\r\n                />\r\n                <Button color=\"primary\"\r\n                // onClick={(e) =>\r\n                //   this.submitHandler(\r\n                //     e,\r\n                //     this.state.astroId,\r\n                //     this.state.userId,\r\n\r\n                //   )\r\n                // }\r\n\r\n                >\r\n                  <Send className=\"d-lg-none\" size={15} />\r\n                  <span className=\"d-lg-block d-none\">Send</span>\r\n                </Button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    chat: state.chatApp.chats\r\n  }\r\n}\r\nexport default connect(mapStateToProps, { togglePinned, sendMessage })(ChatLog)\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"type\", \"bsSize\", \"valid\", \"invalid\", \"tag\", \"addon\", \"plaintext\", \"innerRef\"];\n\n/* eslint react/prefer-stateless-function: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, warnOnce, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool,\n  invalid: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  type: 'text'\n};\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.focus = function focus() {\n    if (this.ref) {\n      this.ref.focus();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        type = _this$props.type,\n        bsSize = _this$props.bsSize,\n        valid = _this$props.valid,\n        invalid = _this$props.invalid,\n        tag = _this$props.tag,\n        addon = _this$props.addon,\n        plaintext = _this$props.plaintext,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\n    var isNotaNumber = new RegExp('\\\\D', 'g');\n    var fileInput = type === 'file';\n    var textareaInput = type === 'textarea';\n    var selectInput = type === 'select';\n    var rangeInput = type === 'range';\n    var Tag = tag || (selectInput || textareaInput ? type : 'input');\n    var formControlClass = 'form-control';\n\n    if (plaintext) {\n      formControlClass = formControlClass + \"-plaintext\";\n      Tag = tag || 'input';\n    } else if (fileInput) {\n      formControlClass = formControlClass + \"-file\";\n    } else if (rangeInput) {\n      formControlClass = formControlClass + \"-range\";\n    } else if (checkInput) {\n      if (addon) {\n        formControlClass = null;\n      } else {\n        formControlClass = 'form-check-input';\n      }\n    }\n\n    if (attributes.size && isNotaNumber.test(attributes.size)) {\n      warnOnce('Please use the prop \"bsSize\" instead of the \"size\" to bootstrap\\'s input sizing.');\n      bsSize = attributes.size;\n      delete attributes.size;\n    }\n\n    var classes = mapToCssModules(classNames(className, invalid && 'is-invalid', valid && 'is-valid', bsSize ? \"form-control-\" + bsSize : false, formControlClass), cssModule);\n\n    if (Tag === 'input' || tag && typeof tag === 'function') {\n      attributes.type = type;\n    }\n\n    if (attributes.children && !(plaintext || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {\n      warnOnce(\"Input with a type of \\\"\" + type + \"\\\" cannot have children. Please use \\\"value\\\"/\\\"defaultValue\\\" instead.\");\n      delete attributes.children;\n    }\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      \"aria-invalid\": invalid\n    }));\n  };\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\nexport default Input;","import axios from \"axios\"\r\n\r\nexport const getChats = () => {\r\n  return dispatch => {\r\n    axios\r\n      .get(\"api/app/chat/chats\")\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"GET_CONTACTS\",\r\n          contacts: response.data.contacts,\r\n          chats: response.data.chats\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n\r\nexport const getContactChats = () => {\r\n  return dispatch => {\r\n    axios\r\n      .get(\"api/app/chat/chat-contacts\")\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"GET_CHAT_CONTACTS\",\r\n          chats: response.data\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n\r\nexport const togglePinned = (id, value) => {\r\n  return dispatch => {\r\n    axios\r\n      .post(\"/api/apps/chat/set-pinned/\", {\r\n        contactId: id,\r\n        value\r\n      })\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"SET_PINNED\",\r\n          id,\r\n          value\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n\r\nexport const sendMessage = (id, isPinned, text) => {\r\n  if (text.length > 0) {\r\n    return dispatch => {\r\n      let newMsg = {\r\n        textContent: text,\r\n        isSent: true,\r\n        isSeen: false,\r\n        time: new Date().toString()\r\n      }\r\n      axios\r\n        .post(\"/api/app/chat/send-message\", {\r\n          contactId: id,\r\n          message: newMsg,\r\n          isPinned\r\n        })\r\n        .then(response => {\r\n          dispatch({\r\n            type: \"SEND_MESSAGE\",\r\n            msg: newMsg,\r\n            id,\r\n            isPinned,\r\n            text\r\n          })\r\n          dispatch(getChats())\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n  } else {\r\n    return\r\n  }\r\n}\r\n\r\nexport const changeStatus = status => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: \"CHANGE_STATUS\",\r\n      status\r\n    })\r\n  }\r\n}\r\n\r\nexport const searchContacts = query => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: \"SEARCH_CONTACTS\",\r\n      query\r\n    })\r\n  }\r\n}\r\n\r\nexport const markSeenAllMessages = id => {\r\n  return dispatch => {\r\n    axios\r\n      .post(\"/api/apps/chat/mark-all-seen/\", {\r\n        contactId: id\r\n      })\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"MARK_AS_SEEN\",\r\n          id\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n}\r\n"],"sourceRoot":""}